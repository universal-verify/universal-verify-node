import{createHmac as e}from"crypto";import t from"jwks-rsa";import r from"jsonwebtoken";const n="https://api.universalverify.com";class ApiClient{constructor(){}async exchangeCodeForTokens(e){const t=await fetch(n+"/token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Token exchange failed: ${t.statusText}`);return t.json()}async getUserInfo(e,t){let r=n+"/userinfo";t&&(r+=`?timezone=${t}`);const i=await fetch(r,{headers:{Authorization:`Bearer ${e}`}});if(!i.ok)throw new Error(`Failed to get user info: ${i.statusText}`);return i.json()}async getRegionalUserInfo(e,t){const r=await fetch(t,{headers:{Authorization:`Bearer ${e}`}});if(!r.ok)throw new Error(`Failed to get regional user info: ${r.statusText}`);return r.json()}async revokeToken(e,t,r){const i=await fetch(n+"/revoke",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:e,client_id:t,client_secret:r})});if(!i.ok)throw new Error(`Token revocation failed: ${i.statusText}`);return i.json()}async refreshToken(e){const t=await fetch(n+"/token",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`Token refresh failed: ${t.statusText}`);return t.json()}}const i=t({jwksUri:"https://api.universalverify.com/.well-known/jwks.json",requestHeaders:{},timeout:3e4});class UniversalVerify{constructor(e,t){if(!e||"string"!=typeof e)throw new Error("clientId is required");if(!t||"string"!=typeof t)throw new Error("clientSecret is required");this.clientId=e,this.clientSecret=t,this.api=new ApiClient(e,t)}createCodeChallenge(e){e||(e=crypto.randomBytes(32).toString("base64url"));return{codeVerifier:e,codeChallenge:crypto.createHash("sha256").update(e).digest("base64url")}}async exchangeCodeForTokens(e){return function(e,t){for(const r of t)if(!e[r.name]||typeof e[r.name]!==r.type)throw new Error(`${r.name} is required`)}(e,[{name:"code",type:"string"},{name:"codeVerifier",type:"string"},{name:"redirectUri",type:"string"}]),await this.api.exchangeCodeForTokens({client_id:this.clientId,client_secret:this.clientSecret,grant_type:"authorization_code",code:e.code,code_verifier:e.codeVerifier,redirect_uri:e.redirectUri})}async getUserInfo(e,t){return await this.api.getUserInfo(e,t)}async getRegionalUserInfo(e,t){return await this.api.getRegionalUserInfo(e,t)}verifyWebhookSignature(t,r,n){let i=function(t,r,n){const i=e("sha256",n);return i.update(t),i.digest("hex")===r}(t,r,n);if(!i)throw new Error("Invalid webhook signature");return JSON.parse(t)}async revokeToken(e){return await this.api.revokeToken(e,this.clientId,this.clientSecret)}async validateIdToken(e,t){return async function(e,t,o){const{header:s}=r.decode(e,{complete:!0})||{};if(!s||!s.kid)throw new Error("Invalid token header");const a=(await i.getSigningKey(s.kid)).getPublicKey(),c=r.verify(e,a,{algorithms:["RS256"],audience:t,issuer:n});if(o&&c.nonce!==o)throw new Error("Invalid nonce");return c}(e,this.clientId,t)}async refreshToken(e){return await this.api.refreshToken({refresh_token:e,client_id:this.clientId,client_secret:this.clientSecret,grant_type:"refresh_token"})}static get version(){return"0.0.1"}}export{UniversalVerify as default};
